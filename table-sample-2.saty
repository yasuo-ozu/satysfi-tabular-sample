@require: stdjareport
@require: tabularx
@require: option
document (|
	title = { Table sample };
	author = { yasuo-ozu };
|) '<
	+chapter{ Table sampple }<
		+p{
			Table sample
		}
		+p{
			\tabular (fun d m e -> (
				let l = Some ((| left = false; right = true; |)) in
				let r = Some ((| left = true; right = false; |)) in
				let c = Some ((| left = true; right = true; |)) in
				[
					[d l {Program}; m c 1 2 {Answer}; e; m c 1 2 {Time [ms]}; e ];
					[e ; d c {case A} ; d c {case B} ; d c {case A} ; d c {case B} ];
					[d l {foldn} ; d c {Yes}; d c {Yes}; d r {${4}}; d r {${16}} ];
					[d l {mc91} ; d c {No} ; d c {–} ; d r {${24}}; d r {–} ];
					[d l {rev} ; d c {Yes}; d c {Yes}; d r {${4}}; d r {${78}} ];
					[d l {max} ; d c {Yes}; d c {Yes}; d r {${8}}; d r {${69}} ]
				]
			))(fun xs ys -> (
				let thin = stroke 0.5pt Color.black in
				let thick = stroke 1pt Color.black in
				match (ys, List.reverse ys, xs, List.reverse xs) with
					| (y0 :: y1 :: y2 :: _, ylast :: _, x0 :: x1 :: _ :: x3 :: _, xlast :: _) ->
                  [
                     thin (Gr.line (x0, y1) (x1, y2));
                     thin (Gr.line (x1, y0) (x1, ylast));
                     thin (Gr.line (x3, y0) (x3, ylast));
                     thin (Gr.line (x0, y1) (xlast, y1));
                     thin (Gr.line (x0, y2) (xlast, y2));
                     thick (Gr.line (x0, y0) (xlast, y0));
                     thick (Gr.line (x0, ylast) (xlast, ylast))
                  ]
					| _ -> []
			));
		}
	>
>
